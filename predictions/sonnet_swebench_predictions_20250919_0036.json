{
  "psf__requests-1963": {
    "model_patch": "--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -127,7 +127,7 @@ class Session(SessionRedirectMixin):\n         allow_redirects=True, timeout=None, verify=True, cert=None, proxies=None):\n \n         # Create the Request.\n-        req = Request(\n+        merged_setting = Request(\n             method=method.upper(),\n             url=url,\n             headers=headers,\n@@ -137,7 +137,7 @@ class Session(SessionRedirectMixin):\n             auth=auth,\n             cookies=cookies,\n             hooks=hooks)\n-        prep = self.prepare_request(req)\n+        prep = self.prepare_request(merged_setting)\n \n         proxies = proxies or {}\n \n@@ -426,7 +426,7 @@ class SessionRedirectMixin(object):\n             raise TooManyRedirects('Too many redirects.')\n \n         # Copy the original request to have a history\n-        req = prepared_request.copy()\n+        req = resp.request.copy()\n         req.url = url\n \n         # Comment out the Content-Length header of the last request",
    "model_name_or_path": "sonnet"
  },
  "sympy__sympy-13971": {
    "model_patch": "--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1982,7 +1982,7 @@ class LatexPrinter(Printer):\n         if len(items) > 4:\n             items = items[:2] + [r'\\ldots'] + items[-1:]\n \n-        return r'\\left\\[' + r', '.join(items) + r'\\right\\]'\n+        return r'[' + r', '.join(items) + r']'\n \n     def _print_SeqPer(self, seq):\n         if seq.start is None:",
    "model_name_or_path": "sonnet"
  },
  "sympy__sympy-17139": {
    "model_patch": "--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,7 +501,7 @@ def _f(rv):\n         if not isinstance(rv, Pow):\n             return rv\n \n-        if (rv.exp < 0) == True:\n+        if rv.exp.is_real and (rv.exp < 0) == True:\n             # If power is negative, base must be nonzero\n             if not rv.base.is_nonzero:\n                 return rv",
    "model_name_or_path": "sonnet"
  },
  "django__django-12908": {
    "model_patch": "--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1216,6 +1216,8 @@ class QuerySet:\n         if self._fields is not None:\n             clone.query.select_related = False\n             clone.query.clear_select_fields()\n+        if getattr(clone.query.combinator, 'distinct', False):\n+            raise NotImplementedError(\"distinct() is not supported on combined queries.\")\n         clone._fields = fields\n         clone.query.set_values(fields)\n         return clone\n@@ -1227,6 +1229,8 @@ class QuerySet:\n         if self._fields is not None:\n             clone.query.select_related = False\n             clone.query.clear_select_fields()\n+        if getattr(clone.query.combinator, 'distinct', False):\n+            raise NotImplementedError(\"distinct() is not supported on combined queries.\")\n         clone._fields = None\n         clone.query.set_values(fields)\n         return clone",
    "model_name_or_path": "sonnet"
  },
  "django__django-16816": {
    "model_patch": "--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -180,6 +180,12 @@ def _check_list_display(self, obj):\n                     )\n                     continue\n \n+                try:\n+                    field = obj.model._meta.get_field(field_name)\n+                except FieldDoesNotExist:\n+                    if not hasattr(obj.model, field_name):\n+                        errors.append(must_be('a field or attribute', field_name, obj))\n+                    continue\n                 if isinstance(field, (models.ManyToManyField, models.ManyToOneRel)):\n                     errors.append(\n                         checks.Error(",
    "model_name_or_path": "sonnet"
  }
}