{
  "django__django-11564": {
    "model_patch": "--- a/django/conf/__init__.py\n+++ b/django/conf/__init__.py\n@@ -92,6 +92,14 @@ class LazySettings:\n             self._wrapped = Settings(settings_module)\n         return self._wrapped\n \n+    def _add_script_prefix(self, value):\n+        \"\"\"Add SCRIPT_NAME prefix to relative URLs.\"\"\"\n+        if not value or value.startswith(('http://', 'https://', '//')):\n+            return value\n+        from django.urls import get_script_prefix\n+        script_prefix = get_script_prefix()\n+        return script_prefix + value.lstrip('/')\n+\n     def __getattr__(self, name):\n         \"\"\"Return the value of a setting and cache it in self.__dict__.\"\"\"\n         if self._wrapped is empty:\n@@ -99,6 +107,10 @@ class LazySettings:\n             msg = \"Requested setting %s, but settings are not configured. %s\" % (name, ENVIRONMENT_VARIABLE)\n             raise ImproperlyConfigured(msg)\n \n+        if name in ('STATIC_URL', 'MEDIA_URL'):\n+            val = getattr(self._wrapped, name)\n+            return self._add_script_prefix(val)\n+\n         val = getattr(self._wrapped, name)\n \n         # Special case some settings which require further modification.",
    "model_name_or_path": "sonnet"
  },
  "django__django-16400": {
    "model_patch": "--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -83,7 +83,7 @@ def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_DB_\n     searched_perms = list(Permission.objects.using(using).filter(\n         content_type__app_label=app_config.label,\n     ).values_list('content_type', 'codename'))\n-    ctypes = ContentType.objects.filter(\n+    ctypes = ContentType.objects.using(using).filter(\n         app_label=app_config.label,\n     ).values_list('id', 'app_label', 'model')\n ",
    "model_name_or_path": "sonnet"
  },
  "django__django-14672": {
    "model_patch": "--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -98,7 +98,7 @@ class ManyToManyRel(ForeignObjectRel):\n             self.through,\n             self.field.name,\n             self.field.model._meta.object_name.lower(),\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.field.to._meta.object_name.lower(),\n             self.field.to._meta.app_label,\n             self.field.to._meta.model_name,",
    "model_name_or_path": "sonnet"
  },
  "sympy__sympy-17630": {
    "model_patch": "--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -1,5 +1,5 @@\n from typing import Any, Dict, Type\n-from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Add\n+from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Add, sympify\n from sympy.core.decorators import call_highest_priority\n from sympy.core.sympify import SympifyError, _sympify\n from sympy.functions import conjugate, transpose\n@@ -1024,7 +1024,7 @@ class MatrixExpr(Expr):\n     def _eval_power(self, exp):\n         if exp.is_zero:\n             if self.rows != self.cols:\n-                raise ShapeError(\"Power of non-square matrix!\")\n+                raise ShapeError(\"Power of non-square matrix!\")\n             return Identity(self.rows)\n         elif exp.is_negative:\n             if exp == -1:\n@@ -1032,6 +1032,9 @@ class MatrixExpr(Expr):\n             return self.inverse() ** (-exp)\n         return MatPow(self, exp)\n \n+    def _eval_simplify(self, **kwargs):\n+        return self\n+\n     def _eval_transpose(self):\n         from .transpose import Transpose\n         return Transpose(self)\n@@ -1040,6 +1043,10 @@ class MatrixExpr(Expr):\n         from sympy.matrices.expressions.adjoint import Adjoint\n         return Adjoint(self)\n \n+    def _eval_is_zero(self):\n+        if isinstance(self, ZeroMatrix):\n+            return True\n+\n     def _eval_conjugate(self):\n         from sympy.matrices.expressions.adjoint import Adjoint\n         from .transpose import Transpose",
    "model_name_or_path": "sonnet"
  },
  "django__django-14155": {
    "model_patch": "--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -1,10 +1,11 @@\n from __future__ import unicode_literals\n \n import functools\n import re\n from threading import local\n \n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils import six\n from django.utils.datastructures import MultiValueDict\n from django.utils.encoding import force_str, force_text\n@@ -282,11 +283,15 @@ class ResolverMatch(object):\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None):\n         self.func = func\n+        # If the function is actually a functools.partial, unwrap it\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            if func.args:\n+                args = func.args + args\n+            if func.keywords:\n+                kwargs.update(func.keywords)\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n \n         if app_names is None:\n             app_names = []",
    "model_name_or_path": "sonnet"
  }
}