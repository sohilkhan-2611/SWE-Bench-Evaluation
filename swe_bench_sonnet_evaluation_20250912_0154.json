{
  "metadata": {
    "model_name": "anthropic/claude-3.5-sonnet",
    "provider": "openrouter",
    "evaluation_date": "2025-09-12T01:54:20.132090",
    "dataset": "princeton-nlp/SWE-bench_Lite",
    "total_instances_tested": 5,
    "evaluation_method": "LLM-based patch evaluation with format validation",
    "evaluation_parameters": {
      "max_tokens": 2000,
      "temperature": 0.1,
      "max_patch_length_filter": 200,
      "max_problem_length_filter": 500
    }
  },
  "performance_summary": {
    "total_tests": 5,
    "successful_fixes": 0,
    "partial_fixes": 2,
    "failed_fixes": 3,
    "success_rate": 0.0,
    "partial_rate": 0.4,
    "failure_rate": 0.6,
    "total_tokens_used": 6030,
    "average_tokens_per_instance": 1206.0,
    "average_similarity_score": 37.0
  },
  "detailed_results": [
    {
      "instance_id": "django__django-14580",
      "repository": "django/django",
      "target_files": [
        "django/db/migrations/serializer.py"
      ],
      "problem_statement": "Missing import statement in generated migration (NameError: name 'models' is not defined)\nDescription\n\t\nI found a bug in Django's latest release: 3.2.4. \nGiven the following contents of models.py:\nfrom django.db import models\nclass MyField(models.TextField):\n\tpass\nclass MyBaseModel(models.Model):\n\tclass Meta:\n\t\tabstract = True\nclass MyMixin:\n\tpass\nclass MyModel(MyMixin, MyBaseModel):\n\tname = MyField(primary_key=True)\nThe makemigrations command will generate the following migration file:\n# Generated by Django 3.2.4 on 2021-06-30 19:13\nimport app.models\nfrom django.db import migrations\nclass Migration(migrations.Migration):\n\tinitial = True\n\tdependencies = [\n\t]\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname='MyModel',\n\t\t\tfields=[\n\t\t\t\t('name', app.models.MyField(primary_key=True, serialize=False)),\n\t\t\t],\n\t\t\toptions={\n\t\t\t\t'abstract': False,\n\t\t\t},\n\t\t\tbases=(app.models.MyMixin, models.Model),\n\t\t),\n\t]\nWhich will then fail with the following error:\n File \"/home/jj/django_example/app/migrations/0001_initial.py\", line 7, in <module>\n\tclass Migration(migrations.Migration):\n File \"/home/jj/django_example/app/migrations/0001_initial.py\", line 23, in Migration\n\tbases=(app.models.MyMixin, models.Model),\nNameError: name 'models' is not defined\nExpected behavior: Django generates a migration file that is valid Python.\nActual behavior: Django generates a migration file that is missing an import statement.\nI think this is a bug of the module django.db.migrations.writer, but I'm not sure. I will be happy to assist with debugging.\nThanks for your attention,\nJaap Joris\n",
      "expected_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -273,7 +273,7 @@ def _format(self):\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", ['from django.db import models']),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n",
      "sonnet_generated_patch": "--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -175,6 +175,8 @@ class BaseSerializer:\n             \"django.db.models.base.Model\": \"django.db.models\",\n             \"django.db.models.fields.related.ManyToManyField\": \"django.db.models\",\n             \"django.db.models.fields.related.ForeignKey\": \"django.db.models\",\n+            \"django.db.models.Model\": \"django.db.models\",\n+            \"django.db.models\": \"django.db.models\",\n         }\n         # Django fields\n         self.known_name_imports.update(",
      "tokens_used": 1228,
      "model": "anthropic/claude-3.5-sonnet",
      "evaluation_timestamp": "2025-09-12T01:52:52.612653",
      "comparison_result": "PARTIAL",
      "similarity_score": 45.0,
      "evaluation_reasoning": ""
    },
    {
      "instance_id": "django__django-12747",
      "repository": "django/django",
      "target_files": [
        "django/db/models/deletion.py"
      ],
      "problem_statement": "QuerySet.Delete - inconsistent result when zero objects deleted\nDescription\n\t\nThe result format of the QuerySet.Delete method is a tuple: (X, Y) \nX - is the total amount of deleted objects (including foreign key deleted objects)\nY - is a dictionary specifying counters of deleted objects for each specific model (the key is the _meta.label of the model and the value is counter of deleted objects of this model).\nExample: <class 'tuple'>: (2, {'my_app.FileAccess': 1, 'my_app.File': 1})\nWhen there are zero objects to delete in total - the result is inconsistent:\nFor models with foreign keys - the result will be: <class 'tuple'>: (0, {})\nFor \"simple\" models without foreign key - the result will be: <class 'tuple'>: (0, {'my_app.BlockLibrary': 0})\nI would expect there will be no difference between the two cases: Either both will have the empty dictionary OR both will have dictionary with model-label keys and zero value.\n",
      "expected_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -408,7 +408,8 @@ def delete(self):\n             # fast deletes\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                if count:\n+                    deleted_counter[qs.model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -426,7 +427,8 @@ def delete(self):\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                if count:\n+                    deleted_counter[model._meta.label] += count\n \n                 if not model._meta.auto_created:\n                     for obj in instances:\n",
      "sonnet_generated_patch": "--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -292,7 +292,7 @@ class Collector:\n         # number of objects deleted for each model label.\n         deleted_counter = Counter()\n         for model, instances in self.data.items():\n-            if len(instances):\n+            if model._meta.label in fast_deletes or len(instances):\n                 deleted_counter[model._meta.label] = len(instances)\n \n         for model, instances in self.data.items():",
      "tokens_used": 1252,
      "model": "anthropic/claude-3.5-sonnet",
      "evaluation_timestamp": "2025-09-12T01:53:11.669518",
      "comparison_result": "FAILED",
      "similarity_score": 25.0,
      "evaluation_reasoning": ""
    },
    {
      "instance_id": "sphinx-doc__sphinx-11445",
      "repository": "sphinx-doc/sphinx",
      "target_files": [
        "sphinx/util/rst.py"
      ],
      "problem_statement": "Using rst_prolog removes top level headings containing a domain directive\n### Describe the bug\r\n\r\nIf `rst_prolog` is set, then any documents that contain a domain directive as the first heading (eg `:mod:`) do not render the heading correctly or include the heading in the toctree.\r\n\r\nIn the example below, if the heading of `docs/mypackage.rst` were `mypackage2` instead of `:mod:mypackage2` then the heading displays correctly.\r\nSimilarly, if you do not set `rst_prolog` then the heading will display correctly.\r\n\r\nThis appears to have been broken for some time because I can reproduce it in v4.0.0 of Sphinx\r\n\r\n### How to Reproduce\r\n\r\n```bash\r\n$ sphinx-quickstart --no-sep --project mypackage --author me -v 0.1.0 --release 0.1.0 --language en docs\r\n$ echo -e 'Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n' > docs/index.rst\r\n$ echo -e ':mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n' > docs/mypackage.rst\r\n$ echo -e 'rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n' >> docs/conf.py\r\n$ sphinx-build -b html . _build\r\n$ grep 'mypackage2' docs/_build/index.html\r\n```\r\n\r\n`docs/index.rst`:\r\n\r\n```rst\r\nWelcome\r\n=======\r\n\r\n.. toctree::\r\n\r\n   mypackage\r\n```\r\n\r\n`docs/mypackage.rst`:\r\n\r\n```rst\r\n:mod:`mypackage2`\r\n=================\r\n\r\nContent\r\n\r\nSubheading\r\n----------\r\n```\r\n\r\n### Environment Information\r\n\r\n```text\r\nPlatform:              linux; (Linux-6.3.2-arch1-1-x86_64-with-glibc2.37)\r\nPython version:        3.11.3 (main, Apr  5 2023, 15:52:25) [GCC 12.2.1 20230201])\r\nPython implementation: CPython\r\nSphinx version:        7.1.0+/d3c91f951\r\nDocutils version:      0.20.1\r\nJinja2 version:        3.1.2\r\nPygments version:      2.15.1\r\n```\r\n\r\n\r\n### Sphinx extensions\r\n\r\n```python\r\n[]\r\n```\r\n\r\n\r\n### Additional context\r\n\r\n_No response_\n",
      "expected_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -10,22 +10,17 @@\n \n from docutils.parsers.rst import roles\n from docutils.parsers.rst.languages import en as english\n+from docutils.parsers.rst.states import Body\n from docutils.statemachine import StringList\n from docutils.utils import Reporter\n-from jinja2 import Environment\n+from jinja2 import Environment, pass_environment\n \n from sphinx.locale import __\n from sphinx.util import docutils, logging\n \n-try:\n-    from jinja2.utils import pass_environment\n-except ImportError:\n-    from jinja2 import environmentfilter as pass_environment\n-\n-\n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -80,7 +75,7 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n     if prolog:\n         pos = 0\n         for line in content:\n-            if docinfo_re.match(line):\n+            if FIELD_NAME_RE.match(line):\n                 pos += 1\n             else:\n                 break\n@@ -91,6 +86,7 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n             pos += 1\n \n         # insert prolog (after docinfo if exists)\n+        lineno = 0\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n",
      "sonnet_generated_patch": "--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -40,7 +40,7 @@ def append_epilog(source: str, epilog: str | None) -> str:\n def prepend_prolog(source: str, prolog: str | None) -> str:\n     \"\"\"Prepend ``prolog`` to ``source``, inserting a blank line.\"\"\"\n     if prolog:\n-        if source.startswith('.. '):\n+        if source.startswith('.. ') and not source.startswith('.. role::'):\n             return prolog + '\\n' + source\n         else:\n             return prolog + '\\n\\n' + source",
      "tokens_used": 1533,
      "model": "anthropic/claude-3.5-sonnet",
      "evaluation_timestamp": "2025-09-12T01:53:27.763420",
      "comparison_result": "FAILED",
      "similarity_score": 25.0,
      "evaluation_reasoning": "The generated patch has significant issues and differs substantially from the expected solution:"
    },
    {
      "instance_id": "django__django-15819",
      "repository": "django/django",
      "target_files": [
        "django/core/management/commands/inspectdb.py"
      ],
      "problem_statement": "inspectdb should generate related_name on same relation links.\nDescription\n\t\nHi!\nAfter models generation with inspectdb command we have issue with relations to same enities\nmodule.Model.field1: (fields.E304) Reverse accessor for 'module.Model.field1' clashes with reverse accessor for 'module.Model.field2'.\nHINT: Add or change a related_name argument to the definition for 'module.Model.field1' or 'module.Model.field2'.\n*\nMaybe we can autogenerate\nrelated_name='attribute_name'\nto all fields in model if related Model was used for this table\n",
      "expected_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -127,12 +127,14 @@ def table2model(table_name):\n                     yield \"# The error was: %s\" % e\n                     continue\n \n+                model_name = table2model(table_name)\n                 yield \"\"\n                 yield \"\"\n-                yield \"class %s(models.Model):\" % table2model(table_name)\n-                known_models.append(table2model(table_name))\n+                yield \"class %s(models.Model):\" % model_name\n+                known_models.append(model_name)\n                 used_column_names = []  # Holds column names used in the table so far\n                 column_to_field_name = {}  # Maps column names to names of model fields\n+                used_relations = set()  # Holds foreign relations used in the table.\n                 for row in table_description:\n                     comment_notes = (\n                         []\n@@ -186,6 +188,12 @@ def table2model(table_name):\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n                             field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        if rel_to in used_relations:\n+                            extra_params[\"related_name\"] = \"%s_%s_set\" % (\n+                                model_name.lower(),\n+                                att_name,\n+                            )\n+                        used_relations.add(rel_to)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n",
      "sonnet_generated_patch": "--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -382,6 +382,7 @@ class Command(BaseCommand):\n                 if rel_to in known_models:\n                     field_type = \"models.ForeignKey(%r\" % rel_to\n                     if att_name.endswith('_id'):\n+                        field_params['related_name'] = att_name[:-3]\n                         att_name = att_name[:-3]\n                     else:\n                         field_params['db_column'] = att_name\n@@ -389,6 +390,8 @@ class Command(BaseCommand):\n                 else:\n                     field_type = \"models.IntegerField\"\n \n+            if field_type.startswith('models.ForeignKey') and not field_params.get('related_name'):\n+                field_params['related_name'] = '%(class)s_%s' % att_name\n             if field_type == 'TextField' and row[3]:  # max_length\n                 field_type = 'CharField'\n ",
      "tokens_used": 1007,
      "model": "anthropic/claude-3.5-sonnet",
      "evaluation_timestamp": "2025-09-12T01:53:48.011990",
      "comparison_result": "PARTIAL",
      "similarity_score": 65.0,
      "evaluation_reasoning": ""
    },
    {
      "instance_id": "matplotlib__matplotlib-25332",
      "repository": "matplotlib/matplotlib",
      "target_files": [
        "lib/matplotlib/cbook.py"
      ],
      "problem_statement": "[Bug]: Unable to pickle figure with aligned labels\n### Bug summary\r\n\r\n Unable to pickle figure after calling `align_labels()`\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(211)\r\nax2 = fig.add_subplot(212)\r\ntime=[0,1,2,3,4]\r\nspeed=[40000,4300,4500,4700,4800]\r\nacc=[10,11,12,13,14]\r\nax1.plot(time,speed)\r\nax1.set_ylabel('speed')\r\nax2.plot(time,acc)\r\nax2.set_ylabel('acc')\r\n\r\nfig.align_labels() ##pickling works after removing this line \r\n\r\npickle.dumps(fig)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\nalign.py\", line 16\r\npickle.dumps(fig)\r\nTypeError: cannot pickle 'weakref.ReferenceType' object\r\n```\r\n### Expected outcome\r\n\r\nPickling successful\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.7.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n",
      "expected_patch": "diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -788,6 +788,19 @@ class Grouper:\n     def __init__(self, init=()):\n         self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n \n+    def __getstate__(self):\n+        return {\n+            **vars(self),\n+            # Convert weak refs to strong ones.\n+            \"_mapping\": {k(): [v() for v in vs] for k, vs in self._mapping.items()},\n+        }\n+\n+    def __setstate__(self, state):\n+        vars(self).update(state)\n+        # Convert strong refs to weak ones.\n+        self._mapping = {weakref.ref(k): [*map(weakref.ref, vs)]\n+                         for k, vs in self._mapping.items()}\n+\n     def __contains__(self, item):\n         return weakref.ref(item) in self._mapping\n \n",
      "sonnet_generated_patch": "--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -1012,7 +1012,7 @@ def _setattr_cm(self, x):\n         self._cm = x\n \n     def __getstate__(self):\n-        return {'_cm': self._cm}\n+        return {'_cm': None if isinstance(self._cm, weakref.ReferenceType) else self._cm}\n \n     def __setstate__(self, state):\n         self._cm = state['_cm']",
      "tokens_used": 1010,
      "model": "anthropic/claude-3.5-sonnet",
      "evaluation_timestamp": "2025-09-12T01:54:09.192712",
      "comparison_result": "FAILED",
      "similarity_score": 25.0,
      "evaluation_reasoning": "The generated patch fails to properly address the core issue for several key reasons:"
    }
  ],
  "example_cases": {
    "successful_examples": [],
    "failed_examples": [
      {
        "instance_id": "django__django-12747",
        "repository": "django/django",
        "target_files": [
          "django/db/models/deletion.py"
        ],
        "problem_statement": "QuerySet.Delete - inconsistent result when zero objects deleted\nDescription\n\t\nThe result format of the QuerySet.Delete method is a tuple: (X, Y) \nX - is the total amount of deleted objects (including foreign key deleted objects)\nY - is a dictionary specifying counters of deleted objects for each specific model (the key is the _meta.label of the model and the value is counter of deleted objects of this model).\nExample: <class 'tuple'>: (2, {'my_app.FileAccess': 1, 'my_app.File': 1})\nWhen there are zero objects to delete in total - the result is inconsistent:\nFor models with foreign keys - the result will be: <class 'tuple'>: (0, {})\nFor \"simple\" models without foreign key - the result will be: <class 'tuple'>: (0, {'my_app.BlockLibrary': 0})\nI would expect there will be no difference between the two cases: Either both will have the empty dictionary OR both will have dictionary with model-label keys and zero value.\n",
        "expected_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -408,7 +408,8 @@ def delete(self):\n             # fast deletes\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                if count:\n+                    deleted_counter[qs.model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -426,7 +427,8 @@ def delete(self):\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                if count:\n+                    deleted_counter[model._meta.label] += count\n \n                 if not model._meta.auto_created:\n                     for obj in instances:\n",
        "sonnet_generated_patch": "--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -292,7 +292,7 @@ class Collector:\n         # number of objects deleted for each model label.\n         deleted_counter = Counter()\n         for model, instances in self.data.items():\n-            if len(instances):\n+            if model._meta.label in fast_deletes or len(instances):\n                 deleted_counter[model._meta.label] = len(instances)\n \n         for model, instances in self.data.items():",
        "tokens_used": 1252,
        "model": "anthropic/claude-3.5-sonnet",
        "evaluation_timestamp": "2025-09-12T01:53:11.669518",
        "comparison_result": "FAILED",
        "similarity_score": 25.0,
        "evaluation_reasoning": ""
      },
      {
        "instance_id": "sphinx-doc__sphinx-11445",
        "repository": "sphinx-doc/sphinx",
        "target_files": [
          "sphinx/util/rst.py"
        ],
        "problem_statement": "Using rst_prolog removes top level headings containing a domain directive\n### Describe the bug\r\n\r\nIf `rst_prolog` is set, then any documents that contain a domain directive as the first heading (eg `:mod:`) do not render the heading correctly or include the heading in the toctree.\r\n\r\nIn the example below, if the heading of `docs/mypackage.rst` were `mypackage2` instead of `:mod:mypackage2` then the heading displays correctly.\r\nSimilarly, if you do not set `rst_prolog` then the heading will display correctly.\r\n\r\nThis appears to have been broken for some time because I can reproduce it in v4.0.0 of Sphinx\r\n\r\n### How to Reproduce\r\n\r\n```bash\r\n$ sphinx-quickstart --no-sep --project mypackage --author me -v 0.1.0 --release 0.1.0 --language en docs\r\n$ echo -e 'Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n' > docs/index.rst\r\n$ echo -e ':mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n' > docs/mypackage.rst\r\n$ echo -e 'rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n' >> docs/conf.py\r\n$ sphinx-build -b html . _build\r\n$ grep 'mypackage2' docs/_build/index.html\r\n```\r\n\r\n`docs/index.rst`:\r\n\r\n```rst\r\nWelcome\r\n=======\r\n\r\n.. toctree::\r\n\r\n   mypackage\r\n```\r\n\r\n`docs/mypackage.rst`:\r\n\r\n```rst\r\n:mod:`mypackage2`\r\n=================\r\n\r\nContent\r\n\r\nSubheading\r\n----------\r\n```\r\n\r\n### Environment Information\r\n\r\n```text\r\nPlatform:              linux; (Linux-6.3.2-arch1-1-x86_64-with-glibc2.37)\r\nPython version:        3.11.3 (main, Apr  5 2023, 15:52:25) [GCC 12.2.1 20230201])\r\nPython implementation: CPython\r\nSphinx version:        7.1.0+/d3c91f951\r\nDocutils version:      0.20.1\r\nJinja2 version:        3.1.2\r\nPygments version:      2.15.1\r\n```\r\n\r\n\r\n### Sphinx extensions\r\n\r\n```python\r\n[]\r\n```\r\n\r\n\r\n### Additional context\r\n\r\n_No response_\n",
        "expected_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -10,22 +10,17 @@\n \n from docutils.parsers.rst import roles\n from docutils.parsers.rst.languages import en as english\n+from docutils.parsers.rst.states import Body\n from docutils.statemachine import StringList\n from docutils.utils import Reporter\n-from jinja2 import Environment\n+from jinja2 import Environment, pass_environment\n \n from sphinx.locale import __\n from sphinx.util import docutils, logging\n \n-try:\n-    from jinja2.utils import pass_environment\n-except ImportError:\n-    from jinja2 import environmentfilter as pass_environment\n-\n-\n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -80,7 +75,7 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n     if prolog:\n         pos = 0\n         for line in content:\n-            if docinfo_re.match(line):\n+            if FIELD_NAME_RE.match(line):\n                 pos += 1\n             else:\n                 break\n@@ -91,6 +86,7 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n             pos += 1\n \n         # insert prolog (after docinfo if exists)\n+        lineno = 0\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n",
        "sonnet_generated_patch": "--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -40,7 +40,7 @@ def append_epilog(source: str, epilog: str | None) -> str:\n def prepend_prolog(source: str, prolog: str | None) -> str:\n     \"\"\"Prepend ``prolog`` to ``source``, inserting a blank line.\"\"\"\n     if prolog:\n-        if source.startswith('.. '):\n+        if source.startswith('.. ') and not source.startswith('.. role::'):\n             return prolog + '\\n' + source\n         else:\n             return prolog + '\\n\\n' + source",
        "tokens_used": 1533,
        "model": "anthropic/claude-3.5-sonnet",
        "evaluation_timestamp": "2025-09-12T01:53:27.763420",
        "comparison_result": "FAILED",
        "similarity_score": 25.0,
        "evaluation_reasoning": "The generated patch has significant issues and differs substantially from the expected solution:"
      }
    ],
    "partial_examples": [
      {
        "instance_id": "django__django-14580",
        "repository": "django/django",
        "target_files": [
          "django/db/migrations/serializer.py"
        ],
        "problem_statement": "Missing import statement in generated migration (NameError: name 'models' is not defined)\nDescription\n\t\nI found a bug in Django's latest release: 3.2.4. \nGiven the following contents of models.py:\nfrom django.db import models\nclass MyField(models.TextField):\n\tpass\nclass MyBaseModel(models.Model):\n\tclass Meta:\n\t\tabstract = True\nclass MyMixin:\n\tpass\nclass MyModel(MyMixin, MyBaseModel):\n\tname = MyField(primary_key=True)\nThe makemigrations command will generate the following migration file:\n# Generated by Django 3.2.4 on 2021-06-30 19:13\nimport app.models\nfrom django.db import migrations\nclass Migration(migrations.Migration):\n\tinitial = True\n\tdependencies = [\n\t]\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname='MyModel',\n\t\t\tfields=[\n\t\t\t\t('name', app.models.MyField(primary_key=True, serialize=False)),\n\t\t\t],\n\t\t\toptions={\n\t\t\t\t'abstract': False,\n\t\t\t},\n\t\t\tbases=(app.models.MyMixin, models.Model),\n\t\t),\n\t]\nWhich will then fail with the following error:\n File \"/home/jj/django_example/app/migrations/0001_initial.py\", line 7, in <module>\n\tclass Migration(migrations.Migration):\n File \"/home/jj/django_example/app/migrations/0001_initial.py\", line 23, in Migration\n\tbases=(app.models.MyMixin, models.Model),\nNameError: name 'models' is not defined\nExpected behavior: Django generates a migration file that is valid Python.\nActual behavior: Django generates a migration file that is missing an import statement.\nI think this is a bug of the module django.db.migrations.writer, but I'm not sure. I will be happy to assist with debugging.\nThanks for your attention,\nJaap Joris\n",
        "expected_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -273,7 +273,7 @@ def _format(self):\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", ['from django.db import models']),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n",
        "sonnet_generated_patch": "--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -175,6 +175,8 @@ class BaseSerializer:\n             \"django.db.models.base.Model\": \"django.db.models\",\n             \"django.db.models.fields.related.ManyToManyField\": \"django.db.models\",\n             \"django.db.models.fields.related.ForeignKey\": \"django.db.models\",\n+            \"django.db.models.Model\": \"django.db.models\",\n+            \"django.db.models\": \"django.db.models\",\n         }\n         # Django fields\n         self.known_name_imports.update(",
        "tokens_used": 1228,
        "model": "anthropic/claude-3.5-sonnet",
        "evaluation_timestamp": "2025-09-12T01:52:52.612653",
        "comparison_result": "PARTIAL",
        "similarity_score": 45.0,
        "evaluation_reasoning": ""
      }
    ]
  }
}